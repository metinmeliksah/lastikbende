-- Sipariş tablosunu güncelle
ALTER TABLE siparis
ADD COLUMN teslimat_tipi text NOT NULL DEFAULT 'adres' CHECK (teslimat_tipi IN ('adres', 'magaza')),
ADD COLUMN magaza_id integer REFERENCES sellers(id),
ADD COLUMN montaj_bilgisi jsonb,
ADD COLUMN odeme_bilgisi jsonb NOT NULL DEFAULT '{}'::jsonb,
ADD COLUMN siparis_durumu text NOT NULL DEFAULT 'siparis_alindi' 
  CHECK (siparis_durumu IN (
    'siparis_alindi',
    'odeme_bekliyor',
    'odeme_onaylandi',
    'hazirlaniyor',
    'montaja_hazir',
    'montajda',
    'kargoya_verildi',
    'teslim_edildi',
    'iptal_edildi'
  )),
ADD COLUMN siparis_tarihi timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN guncelleme_tarihi timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN kargo_takip_no text,
ADD COLUMN kargo_firmasi text,
ADD COLUMN toplam_tutar decimal(10,2) NOT NULL DEFAULT 0,
ADD COLUMN kargo_ucreti decimal(10,2) NOT NULL DEFAULT 0,
ADD COLUMN genel_toplam decimal(10,2) NOT NULL DEFAULT 0;

-- montaj_bilgisi için örnek yapı:
COMMENT ON COLUMN siparis.montaj_bilgisi IS 
'Montaj bilgileri için örnek JSON yapısı:
{
  "tarih": "2024-04-25",
  "saat": "14:30",
  "not": "Ek montaj notu"
}';

-- odeme_bilgisi için örnek yapı:
COMMENT ON COLUMN siparis.odeme_bilgisi IS 
'Ödeme bilgileri için örnek JSON yapısı:
{
  "yontem": "credit-card|bank-transfer",
  "durum": "beklemede|onaylandi|reddedildi",
  "referans_no": "ödeme referans numarası",
  "tutar": 1000.00,
  "odeme_tarihi": "2024-04-25T14:30:00Z"
}';

-- Sipariş durumu değişikliklerini loglamak için trigger
CREATE TABLE IF NOT EXISTS siparis_durum_log (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  siparis_id bigint REFERENCES siparis(id),
  eski_durum text,
  yeni_durum text,
  degisiklik_tarihi timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  degistiren_kullanici uuid REFERENCES auth.users(id)
);

CREATE OR REPLACE FUNCTION log_siparis_durum_changes()
RETURNS TRIGGER AS $$
BEGIN
  IF OLD.siparis_durumu IS DISTINCT FROM NEW.siparis_durumu THEN
    INSERT INTO siparis_durum_log (
      siparis_id,
      eski_durum,
      yeni_durum,
      degistiren_kullanici
    ) VALUES (
      NEW.id,
      OLD.siparis_durumu,
      NEW.siparis_durumu,
      auth.uid()
    );
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER siparis_durum_degisikligi
  AFTER UPDATE ON siparis
  FOR EACH ROW
  EXECUTE FUNCTION log_siparis_durum_changes();

-- Otomatik güncelleme tarihi için trigger
CREATE OR REPLACE FUNCTION update_guncelleme_tarihi()
RETURNS TRIGGER AS $$
BEGIN
  NEW.guncelleme_tarihi = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER siparis_guncelleme_tarihi
  BEFORE UPDATE ON siparis
  FOR EACH ROW
  EXECUTE FUNCTION update_guncelleme_tarihi();

-- RLS politikalarını güncelle
ALTER TABLE siparis ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Kullanıcılar kendi siparişlerini görebilir"
  ON siparis FOR SELECT
  USING (auth.uid() = kullanici_id);

CREATE POLICY "Kullanıcılar kendi siparişlerini oluşturabilir"
  ON siparis FOR INSERT
  WITH CHECK (auth.uid() = kullanici_id);

CREATE POLICY "Kullanıcılar kendi siparişlerini güncelleyebilir"
  ON siparis FOR UPDATE
  USING (auth.uid() = kullanici_id);

-- Durum logu için RLS
ALTER TABLE siparis_durum_log ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Kullanıcılar kendi sipariş loglarını görebilir"
  ON siparis_durum_log FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM siparis s
      WHERE s.id = siparis_id
      AND s.kullanici_id = auth.uid()
    )
  );

-- İndeksler
CREATE INDEX idx_siparis_kullanici_id ON siparis(kullanici_id);
CREATE INDEX idx_siparis_durum ON siparis(siparis_durumu);
CREATE INDEX idx_siparis_tarih ON siparis(siparis_tarihi);
CREATE INDEX idx_siparis_magaza ON siparis(magaza_id) WHERE magaza_id IS NOT NULL; 